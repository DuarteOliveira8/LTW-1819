.bail ON
.mode columns
.headers on
.nullvalue NULL

PRAGMA FOREIGN_KEYS=ON;

DROP TABLE IF EXISTS RULES;
DROP TABLE IF EXISTS CHANNEL;
DROP TABLE IF EXISTS USER;
DROP TABLE IF EXISTS CHANNELREFERENCE;
DROP TABLE IF EXISTS USERREFERENCE;
DROP TABLE IF EXISTS STORY;
DROP TABLE IF EXISTS COMMENT;
DROP TABLE IF EXISTS SUBSCRIBER;
DROP TABLE IF EXISTS CHANNELSTORY;
DROP TABLE IF EXISTS UPVOTE;
DROP TABLE IF EXISTS DOWNVOTE;
DROP TABLE IF EXISTS USERSTORY;
DROP TABLE IF EXISTS STORYCHANNELREFERENCE;
DROP TABLE IF EXISTS STORYUSERREFERENCE;
DROP TABLE IF EXISTS COMMENTCHANNELREFERENCE;
DROP TABLE IF EXISTS COMMENTUSERREFERENCE;

CREATE TABLE RULES(
	ID		 INTEGER PRIMARY KEY AUTOINCREMENT,
	Title		 STRING NOT NULL,
	Description	 STRING NOT NULL,
	idChannel	 INTEGER REFERENCES CHANNEL(ID) NOT NULL	
);


CREATE TABLE CHANNEL(
	ID		 INTEGER PRIMARY KEY AUTOINCREMENT,
	Name		 STRING NOT NULL,
	Description	 STRING NOT NULL,
	idCreator	 INTEGER REFERENCES USER(ID) NOT NULL,
	idChannelRef	 INTEGER REFERENCES CHANNELREFERENCE(ID) NOT NULL
);


CREATE TABLE USER(
	ID		 INTEGER PRIMARY KEY AUTOINCREMENT,
	Username	 STRING NOT NULL UNIQUE,
	FirstName	 STRING NOT NULL,
	LastName	 STRING NOT NULL,
	Email		 STRING NOT NULL,
	Password	 CHAR (256) NOT NULL UNIQUE,
	Bio		 STRING NOT NULL,
	Avatar		 STRING DEFAULT "default.jpg",
	BirthDate	 DATE NOT NULL,
	idUserRef	 INTEGER REFERENCES USERREFERENCE(ID) NOT NULL
);

CREATE TABLE CHANNELREFERENCE(
	ID		 INTEGER PRIMARY KEY AUTOINCREMENT
);

CREATE TABLE USERREFERENCE(
	ID		 INTEGER PRIMARY KEY AUTOINCREMENT
);

CREATE TABLE STORY(
	ID		 INTEGER PRIMARY KEY AUTOINCREMENT,
	Title		 STRING NOT NULL,
	Text		 STRING NOT NULL,
	StoryDate	 DATE NOT NULL,
	idAuthor	 INTEGER REFERENCES USER(ID) NOT NULL,
	ChannelStory	 INTEGER REFERENCES CHANNEL(ID) NOT NULL	
);

CREATE TABLE COMMENT(
	ID		 INTEGER PRIMARY KEY AUTOINCREMENT,
	Text		 STRING NOT NULL,
	CommentDate	 DATE NOT NULL,
	idStory		 INTEGER REFERENCES STORY(ID) NOT NULL,
	idAuthor	 INTEGER REFERENCES USER(ID) NOT NULL,
	idComment	 INTEGER REFERENCES COMMENT(ID) NOT NULL
);

CREATE TABLE SUBSCRIBER(
	UserID    	 INTEGER REFERENCES USER(ID),
    	ChannelID 	 INTEGER REFERENCES CHANNEL(ID),
    	PRIMARY KEY (
        UserID,
        ChannelID
    )
); 

CREATE TABLE CHANNELSTORY(
	StoryID    	 INTEGER REFERENCES STORY(ID),
    	ChannelID	 INTEGER REFERENCES CHANNEL(ID),
    	PRIMARY KEY (
        StoryID,
        ChannelID
    )
); 

CREATE TABLE UPVOTE(
	StoryID    	 INTEGER REFERENCES STORY(ID),
    	UserID		 INTEGER REFERENCES USER(ID),
    	PRIMARY KEY (
        StoryID,
        UserID
    )
);

CREATE TABLE DOWNVOTE(
	StoryID    	 INTEGER REFERENCES STORY(ID),
    	UserID		 INTEGER REFERENCES USER(ID),
    	PRIMARY KEY (
        StoryID,
        UserID
    )
);  

CREATE TABLE USERSTORY(
	StoryID    	 INTEGER REFERENCES STORY(ID),
    	UserID		 INTEGER REFERENCES USER(ID),
    	PRIMARY KEY (
        StoryID,
        UserID
    )
); 

CREATE TABLE STORYCHANNELREFERENCE(
	StoryID    	 INTEGER REFERENCES STORY(ID),
    	ChannelRef	 INTEGER REFERENCES CHANNELREFERENCE(ID),
    	PRIMARY KEY (
        StoryID,
        ChannelRef
    )
); 

CREATE TABLE STORYUSERREFERENCE(
	StoryID    	 INTEGER REFERENCES STORY(ID),
    	UserRef		 INTEGER REFERENCES USERREFERENCE(ID),
    	PRIMARY KEY (
        StoryID,
        UserRef
    )
); 


CREATE TABLE COMMENTCHANNELREFERENCE(
	CommentID    	 INTEGER REFERENCES COMMENT(ID),
    	ChannelRef	 INTEGER REFERENCES CHANNELREFERENCE(ID),
    	PRIMARY KEY (
        CommentID,
        ChannelRef
    )
); 

CREATE TABLE COMMENTUSERREFERENCE(
	CommentID    	 INTEGER REFERENCES COMMENT(ID),
    	UserRef		 INTEGER REFERENCES USERREFERENCE(ID),
    	PRIMARY KEY (
        CommentID,
        UserRef
    )
); 
