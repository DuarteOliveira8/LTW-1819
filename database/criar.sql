.bail ON
.mode columns
.headers on
.nullvalue NULL

PRAGMA FOREIGN_KEYS=ON;

DROP TABLE IF EXISTS RULES;
DROP TABLE IF EXISTS CHANNEL;
DROP TABLE IF EXISTS USER;
DROP TABLE IF EXISTS STORY;
DROP TABLE IF EXISTS COMMENT;
DROP TABLE IF EXISTS SUBSCRIBER;
DROP TABLE IF EXISTS CHANNELSTORY;
DROP TABLE IF EXISTS UPVOTE;
DROP TABLE IF EXISTS DOWNVOTE;
DROP TABLE IF EXISTS USERSTORY;


CREATE TABLE RULES(
	ID		 INTEGER PRIMARY KEY AUTOINCREMENT,
	Title		 STRING NOT NULL,
	Description	 STRING NOT NULL,
	idChannel	 INTEGER REFERENCES CHANNEL(ID) ON DELETE CASCADE NOT NULL	
);


CREATE TABLE CHANNEL(
	ID		 INTEGER PRIMARY KEY AUTOINCREMENT,
	Name		 STRING NOT NULL,
	Description	 STRING NOT NULL,
	idCreator	 INTEGER REFERENCES USER(ID) ON DELETE CASCADE NOT NULL
);


CREATE TABLE USER(
	ID		 INTEGER PRIMARY KEY AUTOINCREMENT,
	Username	 STRING NOT NULL UNIQUE,
	FirstName	 STRING NOT NULL,
	LastName	 STRING NOT NULL,
	Email		 STRING NOT NULL UNIQUE,
	Password	 CHAR (256) NOT NULL,
	Bio		 STRING NOT NULL,
	Avatar		 STRING DEFAULT "default.jpg",
	BirthDate	 DATE NOT NULL
);

CREATE TABLE STORY(
	ID		 INTEGER PRIMARY KEY AUTOINCREMENT,
	Title		 STRING NOT NULL,
	Text		 STRING,
	StoryDate	 DATE NOT NULL,
	idAuthor	 INTEGER REFERENCES USER(ID) ON DELETE CASCADE NOT NULL,
	UpvoteRatio	 INTEGER, 
	ChannelStory	 INTEGER REFERENCES CHANNEL(ID) ON DELETE CASCADE NOT NULL 	
);

CREATE TABLE COMMENT(
	ID		 INTEGER PRIMARY KEY AUTOINCREMENT,
	Text		 STRING NOT NULL,
	CommentDate	 DATE NOT NULL,
	idStory		 INTEGER REFERENCES STORY(ID) ON DELETE CASCADE NOT NULL,
	idAuthor	 INTEGER REFERENCES USER(ID) ON DELETE CASCADE NOT NULL,
	idComment	 INTEGER REFERENCES COMMENT(ID) ON DELETE CASCADE
);

CREATE TABLE SUBSCRIBER(
	UserID    	 INTEGER REFERENCES USER(ID) ON DELETE CASCADE,
    	ChannelID 	 INTEGER REFERENCES CHANNEL(ID) ON DELETE CASCADE,
    	PRIMARY KEY (
        UserID,
        ChannelID
    )
); 

CREATE TABLE CHANNELSTORY(
	StoryID    	 INTEGER REFERENCES STORY(ID) ON DELETE CASCADE,
    	ChannelID	 INTEGER REFERENCES CHANNEL(ID) ON DELETE CASCADE,
    	PRIMARY KEY (
        StoryID,
        ChannelID
    )
); 

CREATE TABLE UPVOTE(
	StoryID    	 INTEGER REFERENCES STORY(ID) ON DELETE CASCADE,
    	UserID		 INTEGER REFERENCES USER(ID) ON DELETE CASCADE,
    	PRIMARY KEY (
        StoryID,
        UserID
    )
);

CREATE TABLE DOWNVOTE(
	StoryID    	 INTEGER REFERENCES STORY(ID) ON DELETE CASCADE,
    	UserID		 INTEGER REFERENCES USER(ID) ON DELETE CASCADE,
    	PRIMARY KEY (
        StoryID,
        UserID
    )
);  

CREATE TABLE USERSTORY(
	StoryID    	 INTEGER REFERENCES STORY(ID) ON DELETE CASCADE,
    	UserID		 INTEGER REFERENCES USER(ID) ON DELETE CASCADE,
    	PRIMARY KEY (
        StoryID,
        UserID
    )
); 



DROP TRIGGER IF EXISTS CheckBeforeUpvote;
DROP TRIGGER IF EXISTS CheckBeforeDownvote;
DROP TRIGGER IF EXISTS AddUpvote;
DROP TRIGGER IF EXISTS AddDownvote;
DROP TRIGGER IF EXISTS RemoveUpvote;
DROP TRIGGER IF EXISTS RemoveDownvote;


CREATE TRIGGER CheckBeforeUpvote
BEFORE INSERT ON UPVOTE
FOR EACH ROW
WHEN EXISTS (SELECT * FROM DOWNVOTE WHERE (DOWNVOTE.StoryID=NEW.StoryID and DOWNVOTE.UserID=NEW.UserID))	
BEGIN
	SELECT RAISE(rollback, "You cant upvote and downvote the same post");
END;


CREATE TRIGGER CheckBeforeDownvote
BEFORE INSERT ON DOWNVOTE
FOR EACH ROW
WHEN EXISTS (SELECT * FROM UPVOTE WHERE (UPVOTE.StoryID=NEW.StoryID and UPVOTE.UserID=NEW.UserID))	
BEGIN
	SELECT RAISE(rollback, "You cant upvote and downvote the same post");
END;


CREATE TRIGGER AddUpvote
AFTER INSERT ON UPVOTE
FOR EACH ROW
BEGIN
	UPDATE STORY SET UpvoteRatio = UpvoteRatio + 1 WHERE (Story.ID = NEW.StoryID);	 	 	   
END;

CREATE TRIGGER AddDownvote
AFTER INSERT ON DOWNVOTE
FOR EACH ROW
BEGIN
	UPDATE STORY SET UpvoteRatio = UpvoteRatio - 1 WHERE (Story.ID = NEW.StoryID);	 	 	   
END;

CREATE TRIGGER RemoveUpvote
AFTER DELETE ON UPVOTE
FOR EACH ROW
BEGIN
	UPDATE STORY SET UpvoteRatio = UpvoteRatio - 1 WHERE (Story.ID = NEW.StoryID);	 	 	   
END;

CREATE TRIGGER RemoveDownvote
AFTER DELETE ON DOWNVOTE
FOR EACH ROW
BEGIN
	UPDATE STORY SET UpvoteRatio = UpvoteRatio + 1 WHERE (Story.ID = NEW.StoryID);	 	    
END;
